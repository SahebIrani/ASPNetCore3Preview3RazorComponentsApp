@typeparam TableItem

<table class="table table-hover table-responsive table-striped">
	<thead class="thead-dark">
		<tr class="jsgrid-grid-header"><th>RowNum</th>@GridHeader</tr>
	</thead>
	<tbody>
		@{ int numRow = curPage == 1 ? 1 : ((curPage * PageSize) - PageSize) + 1;}
		@foreach (var item in ItemList)
		{
			<tr class="jsgrid-row-item"><td>@(numRow++)</td>@GridRow(item)</tr>
		}
	</tbody>
</table>
<div class="pagination">

	<button class="btn pagebutton btn-info" onclick=@(async ()=> SetPagerSize("back"))><span>&laquo;</span></button>
	<button class="btn pagebutton btn-secondary" onclick=@(async ()=> NavigateToPage("previous"))>Prev</button>

	@for (int i = startPage; i <= endPage; i++)
	{
		var currentPage = i;
		<button class="btn pagebutton @(currentPage==curPage?" currentpage":"")" onclick=@(async ()=>
		updateList(currentPage))>
			@currentPage
		</button>
	}

	<button class="btn pagebutton btn-secondary" onclick=@(async ()=> NavigateToPage("next"))>Next</button>
	<button class="btn pagebutton btn-info" onclick=@(async ()=> SetPagerSize("forward"))><span>&raquo;</span></button>

	<span class="pagebutton btn btn-link disabled">Page @curPage of @totalPages in @countItem rows</span>

</div>

@functions {
	int totalPages;
	int curPage;
	int pagerSize;

	int startPage;
	int endPage;

	int countItem;
	int rowNumber = 1;

	[Parameter] RenderFragment GridHeader { get; set; }

	[Parameter]
	RenderFragment<TableItem>
	GridRow
	{ get; set; }

	[Parameter]
	IEnumerable<TableItem>
		Items
	{ get; set; }

	[Parameter] int PageSize { get; set; }

	[Parameter] int CountItem { get; set; }

	IEnumerable<TableItem>
		ItemList
	{ get; set; }

	protected override async Task OnInitAsync()
	{
		pagerSize = 5;
		curPage = 1;

		ItemList = Items.Skip((curPage - 1) * PageSize).Take(PageSize);
		totalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);

		countItem = CountItem;
		//UpdateRowNum();

		SetPagerSize("forward");
	}

	public void UpdateRowNum() => rowNumber = curPage == 1 ? 1 : (curPage - 1 * pagerSize);

	public void updateList(int currentPage)
	{
		ItemList = Items.Skip((currentPage - 1) * PageSize).Take(PageSize);
		curPage = currentPage;
		this.StateHasChanged();
	}

	public void SetPagerSize(string direction)
	{
		if (direction == "forward" && endPage < totalPages)
		{
			startPage = endPage + 1;
			if (endPage + pagerSize < totalPages)
			{
				endPage = startPage + pagerSize - 1;
			}
			else
			{
				endPage = totalPages;
			}
			this.StateHasChanged();
		}
		else if (direction == "back" && startPage > 1)
		{
			endPage = startPage - 1;
			startPage = startPage - pagerSize;
		}
	}

	public void NavigateToPage(string direction)
	{
		if (direction == "next")
		{
			if (curPage < totalPages)
			{
				if (curPage == endPage)
				{
					SetPagerSize("forward");
				}
				curPage += 1;
			}
		}
		else if (direction == "previous")
		{
			if (curPage > 1)
			{
				if (curPage == startPage)
				{
					SetPagerSize("back");
				}
				curPage -= 1;
			}
		}

		updateList(curPage);
	}
}
